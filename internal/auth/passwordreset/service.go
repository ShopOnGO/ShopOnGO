package passwordreset

import (
	"crypto/rand"
	"errors"
	"fmt"
	"time"

	"github.com/ShopOnGO/ShopOnGO/configs"
	"github.com/ShopOnGO/ShopOnGO/pkg/di"
	"github.com/ShopOnGO/ShopOnGO/pkg/email"
	"github.com/ShopOnGO/ShopOnGO/pkg/email/smtp"
	"github.com/ShopOnGO/ShopOnGO/pkg/logger"
	"golang.org/x/crypto/bcrypt"
)

type ResetService struct {
    Conf                *configs.Config
    SMTP                *smtp.SMTPSender
    Storage             di.IRedisResetRepository
    UserRepository      di.IUserRepository
}

func NewResetService(conf *configs.Config, smtpSender *smtp.SMTPSender, storage di.IRedisResetRepository, user di.IUserRepository) *ResetService {
	return &ResetService{
        Conf:           conf,
		SMTP:           smtpSender,
		Storage:        storage,
        UserRepository: user,
    }
}

func GenerateCode() (string, error) {
	var num int64
	b := make([]byte, 4)
	if _, err := rand.Read(b); err != nil {
		return "", err
	}

	num = (int64(b[0])<<24 | int64(b[1])<<16 | int64(b[2])<<8 | int64(b[3])) % 1000000

	return fmt.Sprintf("%06d", num), nil
}

func (service *ResetService) RequestReset(toEmail string) error {
    logger.Info("üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è email: " + toEmail)
    
    user, err := service.UserRepository.FindByEmail(toEmail)
    if err != nil {
        logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: " + err.Error())        
        return err
    }

	if user.Provider == "google" {
		logger.Error("‚ùå –æ—à–∏–±–∫–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ Google –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")        
        return errors.New("—Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Google")
    }

	requests, err := service.Storage.GetResetCodeCount(toEmail)
    if err != nil {
        logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è email: " + err.Error())
        return err
    }
    if requests >= service.Conf.Code.MaxRequests {
        return errors.New("–ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    if err := service.Storage.IncrementResetCodeCount(toEmail, service.Conf.Code.RateLimitTTL); err != nil {
        logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è email: " + err.Error())
        return err
    }
    
    code, err := GenerateCode()
    if err != nil {
        logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: " + err.Error())
        return err
    }
    expiresAt := time.Now().Add(service.Conf.Code.CodeTTL)
    if err := service.Storage.SaveToken(toEmail, code, expiresAt); err != nil {
        logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: " + err.Error())
        return err
    }
    emailInput := email.SendEmailInput{
        To:      toEmail,
		Subject: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è",
        Body: code,
	}

    if err := service.SMTP.Send(emailInput); err != nil {
        logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: " + err.Error())
        return fmt.Errorf("failed to send email: %v", err)
    }

    logger.Info("‚úÖ –ö–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email: " + toEmail)

    return nil
}

func (service *ResetService) VerifyCodeByEmail(toEmail, code string) error {
    storedCode, expiresAt, err := service.Storage.GetToken(toEmail)
    if err != nil {
        return err
    }
    if time.Now().After(expiresAt) {
        return errors.New("–∫–æ–¥ –∏—Å—Ç–µ–∫")
    }
    if storedCode != code {
        return errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
    }
    // –Ω–∞–¥–æ –ª–∏
    // return service.Storage.DeleteToken(toEmail)
    return nil
}

func (service *ResetService) ResetPassword(toEmail, newPassword string) error {
	user, err := service.UserRepository.FindByEmail(toEmail)
	if err != nil {
		logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: " + err.Error())
		return fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	if user.Provider == "google" {
        return errors.New("—Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Google")
    }

    // storedCode, expiresAt, err := service.Storage.GetToken(toEmail)
	_, expiresAt, err := service.Storage.GetToken(toEmail)
	if err != nil {
		logger.Error("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è email " + toEmail + ": " + err.Error())
		return fmt.Errorf("–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ")
	}
	if time.Now().After(expiresAt) {
		return errors.New("–∫–æ–¥ –∏—Å—Ç–µ–∫, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π")
	}
	// if storedCode != code {
	// 	return errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
	// }
	if err := service.Storage.DeleteToken(toEmail); err != nil {
		logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è email " + toEmail + ": " + err.Error())
		return err
	}

	newPasswordHash, err := bcrypt.GenerateFromPassword([]byte(newPassword), bcrypt.DefaultCost)

	if err != nil {
		return fmt.Errorf("FailedToHashNewPassword: %w", err)
	}

    logger.Info("–•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:", string(newPasswordHash))
	if err := service.UserRepository.UpdateUserPassword(user.ID, string(newPasswordHash)); err != nil {
		logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è –¥–ª—è email " + toEmail + ": " + err.Error())
		return err
	}
	logger.Info("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è email: " + toEmail)
	return nil
}

func (service *ResetService) ResendCode(toEmail string) error {
	user, err := service.UserRepository.FindByEmail(toEmail)
	if err != nil {
		logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email: " + err.Error())
		return fmt.Errorf("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	if user.Provider == "google" {
        return errors.New("—Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Google")
    }

	requests, err := service.Storage.GetResetCodeCount(toEmail)
	if err != nil {
		logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è email: " + err.Error())
		return err
	}
	if requests >= service.Conf.Code.MaxRequests {
		return errors.New("–ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
	}
	if err := service.Storage.IncrementResetCodeCount(toEmail, service.Conf.Code.RateLimitTTL); err != nil {
		logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è email: " + err.Error())
		return err
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
	code, err := GenerateCode()
	if err != nil {
		logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: " + err.Error())
		return err
	}
	expiresAt := time.Now().Add(service.Conf.Code.CodeTTL)

	if err := service.Storage.SaveToken(toEmail, code, expiresAt); err != nil {
		logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è email " + toEmail + ": " + err.Error())
		return err
	}

	emailInput := email.SendEmailInput{
		To:      toEmail,
		Subject: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–ø–æ–≤—Ç–æ—Ä–Ω–æ)",
		Body:    fmt.Sprintf("–í–∞—à –Ω–æ–≤—ã–π –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: %s", code),
	}

	if err := service.SMTP.Send(emailInput); err != nil {
		logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –¥–ª—è " + toEmail + ": " + err.Error())
		return fmt.Errorf("failed to send email: %v", err)
	}

	logger.Info("‚úÖ –ö–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ email: " + toEmail)
	return nil
}
