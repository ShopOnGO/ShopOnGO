package passwordreset

import (
	"encoding/json"
	"net/http"

	"github.com/ShopOnGO/ShopOnGO/prod/configs"
	"github.com/ShopOnGO/ShopOnGO/prod/pkg/logger"
)

type ResetHandlerDeps struct {
	*configs.Config
	*ResetService
}

type ResetHandler struct {
	*configs.Config
	*ResetService
}

func NewResetHandler(router *http.ServeMux, deps ResetHandlerDeps) {
	handler := &ResetHandler{
		Config:        deps.Config,
		ResetService:   deps.ResetService,
	}
	router.HandleFunc("POST /auth/reset", handler.Reset())
	router.HandleFunc("POST /auth/reset/verify", handler.VerifyCode())
    router.HandleFunc("POST /auth/reset/password", handler.ResetPassword())
    router.HandleFunc("POST /auth/reset/resend", handler.ResendCode())
}

// Reset –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email
// @Summary      –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
// @Description  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Tags         auth
// @Accept       json
// @Produce      json
// @Param        body  body  ResetRequest  true  "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"
// @Success      200   {string}  string  "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω"
// @Failure      400   {string}  string  "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
// @Failure      500   {string}  string  "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"
// @Router       /auth/reset [post]
func (h *ResetHandler) Reset() http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
		var req ResetRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			logger.Error("‚ùå error decoding request body: " + err.Error())
			http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", http.StatusBadRequest)
			return
		}
		logger.Info("üìß –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è email: " + req.Email)
		if err := h.RequestReset(req.Email); err != nil {
			logger.Error("‚ùå error during password reset request: " + err.Error())
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		logger.Info("‚úÖ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –¥–ª—è email: " + req.Email)

		response := map[string]string{"message": "Password reset request initiated successfully"}
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(response)
    }
}

// VerifyCode –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
// @Summary      –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
// @Description  –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –¥–ª—è email, –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
// @Tags         auth
// @Accept       json
// @Produce      json
// @Param        body  body  VerifyCodeRequest  true  "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞"
// @Success      200   {string}  string  "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
// @Failure      400   {string}  string  "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
// @Failure      401   {string}  string  "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥"
// @Router       /auth/reset/verify [post]
func (h *ResetHandler) VerifyCode() http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
		var req VerifyCodeRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", http.StatusBadRequest)
			return
		}
		if err := h.VerifyCodeByEmail(req.Email, req.Code); err != nil {
			http.Error(w, err.Error(), http.StatusUnauthorized)
			return
		}
		response := map[string]string{"message": "Verification code is valid"}
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(response)
    }
}

// ResetPassword –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.
// @Summary      –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
// @Description  –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–±—Ä–æ—Å–∞ –∏, –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// @Tags         auth
// @Accept       json
// @Produce      json
// @Param        body  body  ResetPasswordRequest  true  "–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"
// @Success      200   {string} string  "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
// @Failure      400   {string} string  "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
// @Failure      401   {string} string  "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥"
// @Failure      500   {string} string  "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è"
// @Router       /auth/reset/password [post]
func (h *ResetHandler) ResetPassword() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		var req ResetPasswordRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			logger.Error("‚ùå error decoding request body: " + err.Error())
			http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", http.StatusBadRequest)
			return
		}
		logger.Info("üîë –ó–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è email: " + req.Email)
		if err := h.ResetService.ResetPassword(req.Email, req.NewPassword); err != nil {
			logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –¥–ª—è email " + req.Email + ": " + err.Error())
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		logger.Info("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è email: " + req.Email)
		response := map[string]string{"message": "Password successfully updated"}
        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(http.StatusOK)
        json.NewEncoder(w).Encode(response)
	}
}

// ResendCode –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
// @Summary      –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
// @Description  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ–¥ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// @Tags         auth
// @Accept       json
// @Produce      json
// @Param        body  body  ResetRequest  true  "–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞"
// @Success      200   {string} string  "–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ"
// @Failure      400   {string} string  "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
// @Failure      500   {string} string  "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞"
// @Router       /auth/reset/resend [post]
func (h *ResetHandler) ResendCode() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
        var req ResetRequest
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			logger.Error("‚ùå error decoding request body: " + err.Error())
			http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", http.StatusBadRequest)
			return
		}
		logger.Info("üìß –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è email: " + req.Email)
		if err := h.ResetService.ResendCode(req.Email); err != nil {
			logger.Error("‚ùå –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –¥–ª—è email " + req.Email + ": " + err.Error())
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		logger.Info("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è email: " + req.Email)
		response := map[string]string{"message": "Reset code resent successfully"}
        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(http.StatusOK)
        json.NewEncoder(w).Encode(response)
	}
}
