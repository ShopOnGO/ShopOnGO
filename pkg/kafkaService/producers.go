package kafkaService

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"
)

type KafkaProducers map[string]*KafkaService

func InitKafkaProducers(brokers []string, topics map[string]string) KafkaProducers {
	producers := make(KafkaProducers)

	for name, topic := range topics {
		var producer *KafkaService

		// –¥–æ 10 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka
		for i := 1; i <= 10; i++ {
			producer = NewProducer(brokers, topic)
			if producer != nil {
				fmt.Printf("‚úÖ Kafka producer –¥–ª—è %s –ø–æ–¥–∫–ª—é—á–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ %d)\n", name, i)
				break
			}
			fmt.Printf("‚ö†Ô∏è Kafka producer –¥–ª—è %s –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–ø—ã—Ç–∫–∞ %d/10\n", name, i)
			time.Sleep(5 * time.Second)
		}

		if producer == nil {
			fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kafka –¥–ª—è %s –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫\n", name)
			continue
		}

		producers[name] = producer
	}

	go func() {
		c := make(chan os.Signal, 1)
		signal.Notify(c, os.Interrupt, syscall.SIGTERM)
		<-c
		for name, producer := range producers {
			fmt.Printf("üõë –ó–∞–∫—Ä—ã—Ç–∏–µ Kafka-–ø–∏—Å–∞—Ç–µ–ª—è –¥–ª—è %s\n", name)
			producer.Close()
		}
		os.Exit(0)
	}()

	return producers
}
